	TSTO #16
	BOV pile_pleine
	ADDSP #18
; start main program
; --------------------------------------------------
;       Construction des tables des methodes        
; --------------------------------------------------
; Construction de la table des methodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Construction de la table des methodes de Polyexp
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD code.Polyexp.pexp, R0
	STORE R0, 5(GB)
; --------------------------------------------------
;            Code du programme principal            
; --------------------------------------------------
; Variables declarations:
; Instruction new ligne [19, 16]
	NEW #1, R2
	BOV tas_plein
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.Polyexp
	POP R2
	STORE R2, 6(GB)
	LOAD #0x0.0p0, R2
	STORE R2, 7(GB)
	LOAD #0x1.0p0, R2
	STORE R2, 8(GB)
; Instruction - ligne [21, 15]
	LOAD #0x1.0p0, R2
	OPP R2, R2
	STORE R2, 9(GB)
	LOAD #0x1.6fc2ecp-1, R2
	STORE R2, 10(GB)
; Beginning of main instructions:
; Beginning of WHILE Loop
; Sauvegarde des registres
	PUSH R2
	BRA E_Cond.0
E_Debut.0:
; Beginning of IF ELSE
; Instruction > ligne [27, 35]
; Instruction = ligne [27, 6]
; Appel de methode Polyexp.pexp ligne [27, 12]
	ADDSP #2
	LOAD 6(GB), R2
	STORE R2, 0(SP)
; Instruction = ligne [27, 19]
; Instruction / ligne [27, 28]
; Instruction + ligne [27, 23]
	LOAD 7(GB), R3
	ADD 8(GB), R3
	DIV #0x1.0p1, R3
; Instruction / ligne [27, 28]
; Instruction + ligne [27, 23]
	LOAD 7(GB), R2
	ADD 8(GB), R2
	DIV #0x1.0p1, R2
	STORE R2, 11(GB)
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ dereferencement_null
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R1
; Appel de methode Polyexp.pexp ligne [27, 12]
	ADDSP #2
	LOAD 6(GB), R2
	STORE R2, 0(SP)
; Instruction = ligne [27, 19]
; Instruction / ligne [27, 28]
; Instruction + ligne [27, 23]
	LOAD 7(GB), R3
	ADD 8(GB), R3
	DIV #0x1.0p1, R3
; Instruction / ligne [27, 28]
; Instruction + ligne [27, 23]
	LOAD 7(GB), R2
	ADD 8(GB), R2
	DIV #0x1.0p1, R2
	STORE R2, 11(GB)
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ dereferencement_null
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #2
	LOAD R0, R0
	STORE R0, 12(GB)
	CMP #0x0.0p0, R0
	SGT R0
	CMP #0, R0
	BNE E_Sioui.0
	BRA E_Sinon.0
E_Sioui.0:
; Instruction = ligne [28, 5]
	LOAD 11(GB), R3
	LOAD 11(GB), R2
	STORE R2, 8(GB)
; Instruction = ligne [29, 5]
	LOAD 12(GB), R3
	LOAD 12(GB), R2
	STORE R2, 10(GB)
	BRA E_Fin.0
E_Sinon.0:
; Instruction = ligne [31, 5]
	LOAD 11(GB), R3
	LOAD 11(GB), R2
	STORE R2, 7(GB)
; Instruction = ligne [32, 5]
	LOAD 12(GB), R3
	LOAD 12(GB), R2
	STORE R2, 9(GB)
E_Fin.0:
E_Cond.0:
; Instruction >= ligne [24, 12]
	LOAD 8(GB), R1
; Instruction + ligne [24, 14]
	LOAD 7(GB), R2
	ADD #0x1.0p-23, R2
	CMP R2, R1
	SGE R1
	CMP #0, R1
	BNE E_Debut.0
; Restauration des registres
	LOAD 7(GB), R1
	WFLOAT
	WSTR " = "
	LOAD 7(GB), R1
	WFLOATX
	WNL
	HALT
; --------------------------------------------------
;                   Class Object                   
; --------------------------------------------------
; ---------- Code de la methode equals dans la classe Object
code.Object.equals:
	TSTO #1
	BOV pile_pleine
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0
	RTS
; --------------------------------------------------
;             Class Polyexp            
; --------------------------------------------------
; ---------- Initialisation des champs de Polyexp
init.Polyexp:
	TSTO #0
	BOV pile_pleine
; Initialisation des registres
	LOAD -2(LB), R1
	RTS
; ---------- Code de la methode pexp dans la classe Polyexp
code.Polyexp.pexp:
	TSTO #1
	BOV pile_pleine
; Sauvegarde des registres
	PUSH R2
; Instruction - ligne [14, 123]
; Instruction * ligne [14, 10]
	LOAD -3(LB), R0
; Instruction + ligne [14, 12]
; Instruction * ligne [14, 15]
	LOAD -3(LB), R1
; Instruction + ligne [14, 17]
; Instruction * ligne [14, 20]
	LOAD -3(LB), R2
; Instruction + ligne [14, 22]
; Instruction * ligne [14, 25]
	LOAD -3(LB), R3
; Instruction + ligne [14, 27]
; Instruction * ligne [14, 30]
	LOAD -3(LB), R4
; Instruction + ligne [14, 32]
; Instruction * ligne [14, 35]
	LOAD -3(LB), R5
; Instruction + ligne [14, 37]
; Instruction * ligne [14, 41]
	LOAD -3(LB), R6
; Instruction / ligne [14, 43]
	LOAD #0x1.0p0, R7
	DIV #0x1.3bp12, R7
	MUL R7, R6
; Instruction / ligne [14, 61]
	LOAD #0x1.0p0, R7
	DIV #0x1.68p9, R7
	ADD R7, R6
	MUL R6, R5
; Instruction / ligne [14, 74]
	LOAD #0x1.0p0, R6
	DIV #0x1.ep6, R6
	ADD R6, R5
	MUL R5, R4
; Instruction / ligne [14, 87]
	LOAD #0x1.0p0, R5
	DIV #0x1.8p4, R5
	ADD R5, R4
	MUL R4, R3
; Instruction / ligne [14, 99]
	LOAD #0x1.0p0, R4
	DIV #0x1.8p2, R4
	ADD R4, R3
	MUL R3, R2
; Instruction / ligne [14, 110]
	LOAD #0x1.0p0, R3
	DIV #0x1.0p1, R3
	ADD R3, R2
	MUL R2, R1
	ADD #0x1.0p0, R1
	MUL R1, R0
; Instruction /* conv float */ ligne null
	LOAD #1, R1
	FLOAT R1, R1
	SUB R1, R0
	BRA fin.Polyexp.pexp
	WSTR "Erreur : sortie de la methode sans return"
	WNL
	ERROR
fin.Polyexp.pexp:
; Restauration des registres
	RTS
; --------------------------------------------------
;        Message d'erreur : pile_pleine        
; --------------------------------------------------
pile_pleine:
	WSTR "Erreur: Pile pleine "
	WNL
	ERROR
; --------------------------------------------------
; Message d'erreur : dereferencement_null
; --------------------------------------------------
dereferencement_null:
	WSTR "Erreur: Dereferencement de null"
	WNL
	ERROR
; --------------------------------------------------
;           Message d'erreur : io_error           
; --------------------------------------------------
io_error:
	WSTR "Erreur: Input/Output error"
	WNL
	ERROR
; --------------------------------------------------
;          Message d'erreur : tas_plein          
; --------------------------------------------------
tas_plein:
	WSTR "Erreur: Tas plein"
	WNL
	ERROR
; --------------------------------------------------
;  Message d'erreur : division_par_zero  
; --------------------------------------------------
division_par_zero:
	WSTR "Erreur: Division par zero"
	WNL
	ERROR
; --------------------------------------------------
;     Message d'erreur : float_imprecis     
; --------------------------------------------------
float_imprecis:
	WSTR "Erreur: Résultat n’est pas codable sur un flottant"
	WNL
	ERROR
; end main program
